/*
AVNU API

REST API documentation for accessing liquidity on Layer 2.  AVNU is a decentralized exchange protocol enabling the fastest and the most efficient operations in DeFi for Layer 2 with better pricing, zero slippage, MEV-protection and gasless trading.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the TypedData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TypedData{}

// TypedData struct for TypedData
type TypedData struct {
	Types map[string][]Type `json:"types"`
	PrimaryType string `json:"primaryType"`
	Domain Domain `json:"domain"`
	Message TypedDataMessage `json:"message"`
}

type _TypedData TypedData

// NewTypedData instantiates a new TypedData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTypedData(types map[string][]Type, primaryType string, domain Domain, message TypedDataMessage) *TypedData {
	this := TypedData{}
	this.Types = types
	this.PrimaryType = primaryType
	this.Domain = domain
	this.Message = message
	return &this
}

// NewTypedDataWithDefaults instantiates a new TypedData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTypedDataWithDefaults() *TypedData {
	this := TypedData{}
	return &this
}

// GetTypes returns the Types field value
func (o *TypedData) GetTypes() map[string][]Type {
	if o == nil {
		var ret map[string][]Type
		return ret
	}

	return o.Types
}

// GetTypesOk returns a tuple with the Types field value
// and a boolean to check if the value has been set.
func (o *TypedData) GetTypesOk() (*map[string][]Type, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Types, true
}

// SetTypes sets field value
func (o *TypedData) SetTypes(v map[string][]Type) {
	o.Types = v
}

// GetPrimaryType returns the PrimaryType field value
func (o *TypedData) GetPrimaryType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PrimaryType
}

// GetPrimaryTypeOk returns a tuple with the PrimaryType field value
// and a boolean to check if the value has been set.
func (o *TypedData) GetPrimaryTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PrimaryType, true
}

// SetPrimaryType sets field value
func (o *TypedData) SetPrimaryType(v string) {
	o.PrimaryType = v
}

// GetDomain returns the Domain field value
func (o *TypedData) GetDomain() Domain {
	if o == nil {
		var ret Domain
		return ret
	}

	return o.Domain
}

// GetDomainOk returns a tuple with the Domain field value
// and a boolean to check if the value has been set.
func (o *TypedData) GetDomainOk() (*Domain, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Domain, true
}

// SetDomain sets field value
func (o *TypedData) SetDomain(v Domain) {
	o.Domain = v
}

// GetMessage returns the Message field value
func (o *TypedData) GetMessage() TypedDataMessage {
	if o == nil {
		var ret TypedDataMessage
		return ret
	}

	return o.Message
}

// GetMessageOk returns a tuple with the Message field value
// and a boolean to check if the value has been set.
func (o *TypedData) GetMessageOk() (*TypedDataMessage, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Message, true
}

// SetMessage sets field value
func (o *TypedData) SetMessage(v TypedDataMessage) {
	o.Message = v
}

func (o TypedData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TypedData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["types"] = o.Types
	toSerialize["primaryType"] = o.PrimaryType
	toSerialize["domain"] = o.Domain
	toSerialize["message"] = o.Message
	return toSerialize, nil
}

func (o *TypedData) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"types",
		"primaryType",
		"domain",
		"message",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTypedData := _TypedData{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTypedData)

	if err != nil {
		return err
	}

	*o = TypedData(varTypedData)

	return err
}

type NullableTypedData struct {
	value *TypedData
	isSet bool
}

func (v NullableTypedData) Get() *TypedData {
	return v.value
}

func (v *NullableTypedData) Set(val *TypedData) {
	v.value = val
	v.isSet = true
}

func (v NullableTypedData) IsSet() bool {
	return v.isSet
}

func (v *NullableTypedData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTypedData(val *TypedData) *NullableTypedData {
	return &NullableTypedData{value: val, isSet: true}
}

func (v NullableTypedData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTypedData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


