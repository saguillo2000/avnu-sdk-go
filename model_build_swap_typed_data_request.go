/*
AVNU API

REST API documentation for accessing liquidity on Layer 2.  AVNU is a decentralized exchange protocol enabling the fastest and the most efficient operations in DeFi for Layer 2 with better pricing, zero slippage, MEV-protection and gasless trading.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the BuildSwapTypedDataRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BuildSwapTypedDataRequest{}

// BuildSwapTypedDataRequest struct for BuildSwapTypedDataRequest
type BuildSwapTypedDataRequest struct {
	// The unique id of the quote
	QuoteId string `json:"quoteId"`
	// The address which will fill the quote. Not required if then taker address was provided during the quote request
	TakerAddress *string `json:"takerAddress,omitempty"`
	// The maximum acceptable slippage of the buyAmount amount. Default value is 1%. This value is ignored if slippage is not applicable to the selected quote.Min value for gasless transaction is 0.5%
	Slippage float32 `json:"slippage"`
	// If true, the typed data will contains the approve call
	IncludeApprove bool `json:"includeApprove"`
	// The gas token's address the user wants to spend to execute the tx.
	GasTokenAddress string `json:"gasTokenAddress"`
	MaxGasTokenAmount *string `json:"maxGasTokenAmount,omitempty"`
}

type _BuildSwapTypedDataRequest BuildSwapTypedDataRequest

// NewBuildSwapTypedDataRequest instantiates a new BuildSwapTypedDataRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBuildSwapTypedDataRequest(quoteId string, slippage float32, includeApprove bool, gasTokenAddress string) *BuildSwapTypedDataRequest {
	this := BuildSwapTypedDataRequest{}
	this.QuoteId = quoteId
	this.Slippage = slippage
	this.IncludeApprove = includeApprove
	this.GasTokenAddress = gasTokenAddress
	return &this
}

// NewBuildSwapTypedDataRequestWithDefaults instantiates a new BuildSwapTypedDataRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBuildSwapTypedDataRequestWithDefaults() *BuildSwapTypedDataRequest {
	this := BuildSwapTypedDataRequest{}
	return &this
}

// GetQuoteId returns the QuoteId field value
func (o *BuildSwapTypedDataRequest) GetQuoteId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.QuoteId
}

// GetQuoteIdOk returns a tuple with the QuoteId field value
// and a boolean to check if the value has been set.
func (o *BuildSwapTypedDataRequest) GetQuoteIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.QuoteId, true
}

// SetQuoteId sets field value
func (o *BuildSwapTypedDataRequest) SetQuoteId(v string) {
	o.QuoteId = v
}

// GetTakerAddress returns the TakerAddress field value if set, zero value otherwise.
func (o *BuildSwapTypedDataRequest) GetTakerAddress() string {
	if o == nil || IsNil(o.TakerAddress) {
		var ret string
		return ret
	}
	return *o.TakerAddress
}

// GetTakerAddressOk returns a tuple with the TakerAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BuildSwapTypedDataRequest) GetTakerAddressOk() (*string, bool) {
	if o == nil || IsNil(o.TakerAddress) {
		return nil, false
	}
	return o.TakerAddress, true
}

// HasTakerAddress returns a boolean if a field has been set.
func (o *BuildSwapTypedDataRequest) HasTakerAddress() bool {
	if o != nil && !IsNil(o.TakerAddress) {
		return true
	}

	return false
}

// SetTakerAddress gets a reference to the given string and assigns it to the TakerAddress field.
func (o *BuildSwapTypedDataRequest) SetTakerAddress(v string) {
	o.TakerAddress = &v
}

// GetSlippage returns the Slippage field value
func (o *BuildSwapTypedDataRequest) GetSlippage() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Slippage
}

// GetSlippageOk returns a tuple with the Slippage field value
// and a boolean to check if the value has been set.
func (o *BuildSwapTypedDataRequest) GetSlippageOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Slippage, true
}

// SetSlippage sets field value
func (o *BuildSwapTypedDataRequest) SetSlippage(v float32) {
	o.Slippage = v
}

// GetIncludeApprove returns the IncludeApprove field value
func (o *BuildSwapTypedDataRequest) GetIncludeApprove() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IncludeApprove
}

// GetIncludeApproveOk returns a tuple with the IncludeApprove field value
// and a boolean to check if the value has been set.
func (o *BuildSwapTypedDataRequest) GetIncludeApproveOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IncludeApprove, true
}

// SetIncludeApprove sets field value
func (o *BuildSwapTypedDataRequest) SetIncludeApprove(v bool) {
	o.IncludeApprove = v
}

// GetGasTokenAddress returns the GasTokenAddress field value
func (o *BuildSwapTypedDataRequest) GetGasTokenAddress() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.GasTokenAddress
}

// GetGasTokenAddressOk returns a tuple with the GasTokenAddress field value
// and a boolean to check if the value has been set.
func (o *BuildSwapTypedDataRequest) GetGasTokenAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.GasTokenAddress, true
}

// SetGasTokenAddress sets field value
func (o *BuildSwapTypedDataRequest) SetGasTokenAddress(v string) {
	o.GasTokenAddress = v
}

// GetMaxGasTokenAmount returns the MaxGasTokenAmount field value if set, zero value otherwise.
func (o *BuildSwapTypedDataRequest) GetMaxGasTokenAmount() string {
	if o == nil || IsNil(o.MaxGasTokenAmount) {
		var ret string
		return ret
	}
	return *o.MaxGasTokenAmount
}

// GetMaxGasTokenAmountOk returns a tuple with the MaxGasTokenAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BuildSwapTypedDataRequest) GetMaxGasTokenAmountOk() (*string, bool) {
	if o == nil || IsNil(o.MaxGasTokenAmount) {
		return nil, false
	}
	return o.MaxGasTokenAmount, true
}

// HasMaxGasTokenAmount returns a boolean if a field has been set.
func (o *BuildSwapTypedDataRequest) HasMaxGasTokenAmount() bool {
	if o != nil && !IsNil(o.MaxGasTokenAmount) {
		return true
	}

	return false
}

// SetMaxGasTokenAmount gets a reference to the given string and assigns it to the MaxGasTokenAmount field.
func (o *BuildSwapTypedDataRequest) SetMaxGasTokenAmount(v string) {
	o.MaxGasTokenAmount = &v
}

func (o BuildSwapTypedDataRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BuildSwapTypedDataRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["quoteId"] = o.QuoteId
	if !IsNil(o.TakerAddress) {
		toSerialize["takerAddress"] = o.TakerAddress
	}
	toSerialize["slippage"] = o.Slippage
	toSerialize["includeApprove"] = o.IncludeApprove
	toSerialize["gasTokenAddress"] = o.GasTokenAddress
	if !IsNil(o.MaxGasTokenAmount) {
		toSerialize["maxGasTokenAmount"] = o.MaxGasTokenAmount
	}
	return toSerialize, nil
}

func (o *BuildSwapTypedDataRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"quoteId",
		"slippage",
		"includeApprove",
		"gasTokenAddress",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varBuildSwapTypedDataRequest := _BuildSwapTypedDataRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varBuildSwapTypedDataRequest)

	if err != nil {
		return err
	}

	*o = BuildSwapTypedDataRequest(varBuildSwapTypedDataRequest)

	return err
}

type NullableBuildSwapTypedDataRequest struct {
	value *BuildSwapTypedDataRequest
	isSet bool
}

func (v NullableBuildSwapTypedDataRequest) Get() *BuildSwapTypedDataRequest {
	return v.value
}

func (v *NullableBuildSwapTypedDataRequest) Set(val *BuildSwapTypedDataRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableBuildSwapTypedDataRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableBuildSwapTypedDataRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBuildSwapTypedDataRequest(val *BuildSwapTypedDataRequest) *NullableBuildSwapTypedDataRequest {
	return &NullableBuildSwapTypedDataRequest{value: val, isSet: true}
}

func (v NullableBuildSwapTypedDataRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBuildSwapTypedDataRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


