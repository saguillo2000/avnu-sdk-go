/*
AVNU API

REST API documentation for accessing liquidity on Layer 2.  AVNU is a decentralized exchange protocol enabling the fastest and the most efficient operations in DeFi for Layer 2 with better pricing, zero slippage, MEV-protection and gasless trading.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ExecuteRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ExecuteRequest{}

// ExecuteRequest struct for ExecuteRequest
type ExecuteRequest struct {
	// The user's address
	UserAddress string `json:"userAddress"`
	// The typed data that the user signed
	TypedData string `json:"typedData"`
	// The user's typed data signature
	Signature []string `json:"signature"`
	DeploymentData *DeploymentDataDto `json:"deploymentData,omitempty"`
}

type _ExecuteRequest ExecuteRequest

// NewExecuteRequest instantiates a new ExecuteRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExecuteRequest(userAddress string, typedData string, signature []string) *ExecuteRequest {
	this := ExecuteRequest{}
	this.UserAddress = userAddress
	this.TypedData = typedData
	this.Signature = signature
	return &this
}

// NewExecuteRequestWithDefaults instantiates a new ExecuteRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExecuteRequestWithDefaults() *ExecuteRequest {
	this := ExecuteRequest{}
	return &this
}

// GetUserAddress returns the UserAddress field value
func (o *ExecuteRequest) GetUserAddress() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UserAddress
}

// GetUserAddressOk returns a tuple with the UserAddress field value
// and a boolean to check if the value has been set.
func (o *ExecuteRequest) GetUserAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UserAddress, true
}

// SetUserAddress sets field value
func (o *ExecuteRequest) SetUserAddress(v string) {
	o.UserAddress = v
}

// GetTypedData returns the TypedData field value
func (o *ExecuteRequest) GetTypedData() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TypedData
}

// GetTypedDataOk returns a tuple with the TypedData field value
// and a boolean to check if the value has been set.
func (o *ExecuteRequest) GetTypedDataOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TypedData, true
}

// SetTypedData sets field value
func (o *ExecuteRequest) SetTypedData(v string) {
	o.TypedData = v
}

// GetSignature returns the Signature field value
func (o *ExecuteRequest) GetSignature() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Signature
}

// GetSignatureOk returns a tuple with the Signature field value
// and a boolean to check if the value has been set.
func (o *ExecuteRequest) GetSignatureOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Signature, true
}

// SetSignature sets field value
func (o *ExecuteRequest) SetSignature(v []string) {
	o.Signature = v
}

// GetDeploymentData returns the DeploymentData field value if set, zero value otherwise.
func (o *ExecuteRequest) GetDeploymentData() DeploymentDataDto {
	if o == nil || IsNil(o.DeploymentData) {
		var ret DeploymentDataDto
		return ret
	}
	return *o.DeploymentData
}

// GetDeploymentDataOk returns a tuple with the DeploymentData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExecuteRequest) GetDeploymentDataOk() (*DeploymentDataDto, bool) {
	if o == nil || IsNil(o.DeploymentData) {
		return nil, false
	}
	return o.DeploymentData, true
}

// HasDeploymentData returns a boolean if a field has been set.
func (o *ExecuteRequest) HasDeploymentData() bool {
	if o != nil && !IsNil(o.DeploymentData) {
		return true
	}

	return false
}

// SetDeploymentData gets a reference to the given DeploymentDataDto and assigns it to the DeploymentData field.
func (o *ExecuteRequest) SetDeploymentData(v DeploymentDataDto) {
	o.DeploymentData = &v
}

func (o ExecuteRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ExecuteRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["userAddress"] = o.UserAddress
	toSerialize["typedData"] = o.TypedData
	toSerialize["signature"] = o.Signature
	if !IsNil(o.DeploymentData) {
		toSerialize["deploymentData"] = o.DeploymentData
	}
	return toSerialize, nil
}

func (o *ExecuteRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"userAddress",
		"typedData",
		"signature",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varExecuteRequest := _ExecuteRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varExecuteRequest)

	if err != nil {
		return err
	}

	*o = ExecuteRequest(varExecuteRequest)

	return err
}

type NullableExecuteRequest struct {
	value *ExecuteRequest
	isSet bool
}

func (v NullableExecuteRequest) Get() *ExecuteRequest {
	return v.value
}

func (v *NullableExecuteRequest) Set(val *ExecuteRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableExecuteRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableExecuteRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExecuteRequest(val *ExecuteRequest) *NullableExecuteRequest {
	return &NullableExecuteRequest{value: val, isSet: true}
}

func (v NullableExecuteRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExecuteRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


