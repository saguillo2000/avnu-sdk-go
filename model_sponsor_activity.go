/*
AVNU API

REST API documentation for accessing liquidity on Layer 2.  AVNU is a decentralized exchange protocol enabling the fastest and the most efficient operations in DeFi for Layer 2 with better pricing, zero slippage, MEV-protection and gasless trading.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the SponsorActivity type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SponsorActivity{}

// SponsorActivity struct for SponsorActivity
type SponsorActivity struct {
	// The sponsor's name
	Name string `json:"name"`
	// The number of succeeded transactions
	SucceededTxCount int64 `json:"succeededTxCount"`
	// The number of reverted transactions
	RevertedTxCount int64 `json:"revertedTxCount"`
	// The total number executed transactions
	TxCount int64 `json:"txCount"`
	// The amount of ETH paid for succeeded transactions
	SucceededGasFees string `json:"succeededGasFees"`
	// The amount of ETH paid for reverted transactions
	RevertedGasFees string `json:"revertedGasFees"`
	// The amount of ETH paid for all transactions
	GasFees string `json:"gasFees"`
	// The remaining credits. When zero, please contact us so you can recharge
	RemainingCredits string `json:"remainingCredits"`
}

type _SponsorActivity SponsorActivity

// NewSponsorActivity instantiates a new SponsorActivity object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSponsorActivity(name string, succeededTxCount int64, revertedTxCount int64, txCount int64, succeededGasFees string, revertedGasFees string, gasFees string, remainingCredits string) *SponsorActivity {
	this := SponsorActivity{}
	this.Name = name
	this.SucceededTxCount = succeededTxCount
	this.RevertedTxCount = revertedTxCount
	this.TxCount = txCount
	this.SucceededGasFees = succeededGasFees
	this.RevertedGasFees = revertedGasFees
	this.GasFees = gasFees
	this.RemainingCredits = remainingCredits
	return &this
}

// NewSponsorActivityWithDefaults instantiates a new SponsorActivity object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSponsorActivityWithDefaults() *SponsorActivity {
	this := SponsorActivity{}
	return &this
}

// GetName returns the Name field value
func (o *SponsorActivity) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *SponsorActivity) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *SponsorActivity) SetName(v string) {
	o.Name = v
}

// GetSucceededTxCount returns the SucceededTxCount field value
func (o *SponsorActivity) GetSucceededTxCount() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.SucceededTxCount
}

// GetSucceededTxCountOk returns a tuple with the SucceededTxCount field value
// and a boolean to check if the value has been set.
func (o *SponsorActivity) GetSucceededTxCountOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SucceededTxCount, true
}

// SetSucceededTxCount sets field value
func (o *SponsorActivity) SetSucceededTxCount(v int64) {
	o.SucceededTxCount = v
}

// GetRevertedTxCount returns the RevertedTxCount field value
func (o *SponsorActivity) GetRevertedTxCount() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.RevertedTxCount
}

// GetRevertedTxCountOk returns a tuple with the RevertedTxCount field value
// and a boolean to check if the value has been set.
func (o *SponsorActivity) GetRevertedTxCountOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RevertedTxCount, true
}

// SetRevertedTxCount sets field value
func (o *SponsorActivity) SetRevertedTxCount(v int64) {
	o.RevertedTxCount = v
}

// GetTxCount returns the TxCount field value
func (o *SponsorActivity) GetTxCount() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.TxCount
}

// GetTxCountOk returns a tuple with the TxCount field value
// and a boolean to check if the value has been set.
func (o *SponsorActivity) GetTxCountOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TxCount, true
}

// SetTxCount sets field value
func (o *SponsorActivity) SetTxCount(v int64) {
	o.TxCount = v
}

// GetSucceededGasFees returns the SucceededGasFees field value
func (o *SponsorActivity) GetSucceededGasFees() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SucceededGasFees
}

// GetSucceededGasFeesOk returns a tuple with the SucceededGasFees field value
// and a boolean to check if the value has been set.
func (o *SponsorActivity) GetSucceededGasFeesOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SucceededGasFees, true
}

// SetSucceededGasFees sets field value
func (o *SponsorActivity) SetSucceededGasFees(v string) {
	o.SucceededGasFees = v
}

// GetRevertedGasFees returns the RevertedGasFees field value
func (o *SponsorActivity) GetRevertedGasFees() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RevertedGasFees
}

// GetRevertedGasFeesOk returns a tuple with the RevertedGasFees field value
// and a boolean to check if the value has been set.
func (o *SponsorActivity) GetRevertedGasFeesOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RevertedGasFees, true
}

// SetRevertedGasFees sets field value
func (o *SponsorActivity) SetRevertedGasFees(v string) {
	o.RevertedGasFees = v
}

// GetGasFees returns the GasFees field value
func (o *SponsorActivity) GetGasFees() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.GasFees
}

// GetGasFeesOk returns a tuple with the GasFees field value
// and a boolean to check if the value has been set.
func (o *SponsorActivity) GetGasFeesOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.GasFees, true
}

// SetGasFees sets field value
func (o *SponsorActivity) SetGasFees(v string) {
	o.GasFees = v
}

// GetRemainingCredits returns the RemainingCredits field value
func (o *SponsorActivity) GetRemainingCredits() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RemainingCredits
}

// GetRemainingCreditsOk returns a tuple with the RemainingCredits field value
// and a boolean to check if the value has been set.
func (o *SponsorActivity) GetRemainingCreditsOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RemainingCredits, true
}

// SetRemainingCredits sets field value
func (o *SponsorActivity) SetRemainingCredits(v string) {
	o.RemainingCredits = v
}

func (o SponsorActivity) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SponsorActivity) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["succeededTxCount"] = o.SucceededTxCount
	toSerialize["revertedTxCount"] = o.RevertedTxCount
	toSerialize["txCount"] = o.TxCount
	toSerialize["succeededGasFees"] = o.SucceededGasFees
	toSerialize["revertedGasFees"] = o.RevertedGasFees
	toSerialize["gasFees"] = o.GasFees
	toSerialize["remainingCredits"] = o.RemainingCredits
	return toSerialize, nil
}

func (o *SponsorActivity) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"succeededTxCount",
		"revertedTxCount",
		"txCount",
		"succeededGasFees",
		"revertedGasFees",
		"gasFees",
		"remainingCredits",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSponsorActivity := _SponsorActivity{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSponsorActivity)

	if err != nil {
		return err
	}

	*o = SponsorActivity(varSponsorActivity)

	return err
}

type NullableSponsorActivity struct {
	value *SponsorActivity
	isSet bool
}

func (v NullableSponsorActivity) Get() *SponsorActivity {
	return v.value
}

func (v *NullableSponsorActivity) Set(val *SponsorActivity) {
	v.value = val
	v.isSet = true
}

func (v NullableSponsorActivity) IsSet() bool {
	return v.isSet
}

func (v *NullableSponsorActivity) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSponsorActivity(val *SponsorActivity) *NullableSponsorActivity {
	return &NullableSponsorActivity{value: val, isSet: true}
}

func (v NullableSponsorActivity) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSponsorActivity) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


