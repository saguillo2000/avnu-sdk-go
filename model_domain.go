/*
AVNU API

REST API documentation for accessing liquidity on Layer 2.  AVNU is a decentralized exchange protocol enabling the fastest and the most efficient operations in DeFi for Layer 2 with better pricing, zero slippage, MEV-protection and gasless trading.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the Domain type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Domain{}

// Domain struct for Domain
type Domain struct {
	Name JsonPrimitive `json:"name"`
	Version JsonPrimitive `json:"version"`
	ChainId JsonPrimitive `json:"chainId"`
	Revision *string `json:"revision,omitempty"`
	SeparatorNamelib string `json:"separatorName$lib"`
}

type _Domain Domain

// NewDomain instantiates a new Domain object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDomain(name JsonPrimitive, version JsonPrimitive, chainId JsonPrimitive, separatorNamelib string) *Domain {
	this := Domain{}
	this.Name = name
	this.Version = version
	this.ChainId = chainId
	this.SeparatorNamelib = separatorNamelib
	return &this
}

// NewDomainWithDefaults instantiates a new Domain object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDomainWithDefaults() *Domain {
	this := Domain{}
	return &this
}

// GetName returns the Name field value
func (o *Domain) GetName() JsonPrimitive {
	if o == nil {
		var ret JsonPrimitive
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Domain) GetNameOk() (*JsonPrimitive, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *Domain) SetName(v JsonPrimitive) {
	o.Name = v
}

// GetVersion returns the Version field value
func (o *Domain) GetVersion() JsonPrimitive {
	if o == nil {
		var ret JsonPrimitive
		return ret
	}

	return o.Version
}

// GetVersionOk returns a tuple with the Version field value
// and a boolean to check if the value has been set.
func (o *Domain) GetVersionOk() (*JsonPrimitive, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Version, true
}

// SetVersion sets field value
func (o *Domain) SetVersion(v JsonPrimitive) {
	o.Version = v
}

// GetChainId returns the ChainId field value
func (o *Domain) GetChainId() JsonPrimitive {
	if o == nil {
		var ret JsonPrimitive
		return ret
	}

	return o.ChainId
}

// GetChainIdOk returns a tuple with the ChainId field value
// and a boolean to check if the value has been set.
func (o *Domain) GetChainIdOk() (*JsonPrimitive, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ChainId, true
}

// SetChainId sets field value
func (o *Domain) SetChainId(v JsonPrimitive) {
	o.ChainId = v
}

// GetRevision returns the Revision field value if set, zero value otherwise.
func (o *Domain) GetRevision() string {
	if o == nil || IsNil(o.Revision) {
		var ret string
		return ret
	}
	return *o.Revision
}

// GetRevisionOk returns a tuple with the Revision field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Domain) GetRevisionOk() (*string, bool) {
	if o == nil || IsNil(o.Revision) {
		return nil, false
	}
	return o.Revision, true
}

// HasRevision returns a boolean if a field has been set.
func (o *Domain) HasRevision() bool {
	if o != nil && !IsNil(o.Revision) {
		return true
	}

	return false
}

// SetRevision gets a reference to the given string and assigns it to the Revision field.
func (o *Domain) SetRevision(v string) {
	o.Revision = &v
}

// GetSeparatorNamelib returns the SeparatorNamelib field value
func (o *Domain) GetSeparatorNamelib() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SeparatorNamelib
}

// GetSeparatorNamelibOk returns a tuple with the SeparatorNamelib field value
// and a boolean to check if the value has been set.
func (o *Domain) GetSeparatorNamelibOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SeparatorNamelib, true
}

// SetSeparatorNamelib sets field value
func (o *Domain) SetSeparatorNamelib(v string) {
	o.SeparatorNamelib = v
}

func (o Domain) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Domain) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["version"] = o.Version
	toSerialize["chainId"] = o.ChainId
	if !IsNil(o.Revision) {
		toSerialize["revision"] = o.Revision
	}
	toSerialize["separatorName$lib"] = o.SeparatorNamelib
	return toSerialize, nil
}

func (o *Domain) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"version",
		"chainId",
		"separatorName$lib",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDomain := _Domain{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDomain)

	if err != nil {
		return err
	}

	*o = Domain(varDomain)

	return err
}

type NullableDomain struct {
	value *Domain
	isSet bool
}

func (v NullableDomain) Get() *Domain {
	return v.value
}

func (v *NullableDomain) Set(val *Domain) {
	v.value = val
	v.isSet = true
}

func (v NullableDomain) IsSet() bool {
	return v.isSet
}

func (v *NullableDomain) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDomain(val *Domain) *NullableDomain {
	return &NullableDomain{value: val, isSet: true}
}

func (v NullableDomain) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDomain) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


