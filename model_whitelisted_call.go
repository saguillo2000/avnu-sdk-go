/*
AVNU API

REST API documentation for accessing liquidity on Layer 2.  AVNU is a decentralized exchange protocol enabling the fastest and the most efficient operations in DeFi for Layer 2 with better pricing, zero slippage, MEV-protection and gasless trading.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the WhitelistedCall type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &WhitelistedCall{}

// WhitelistedCall The list of whitelisted calls
type WhitelistedCall struct {
	// The value can be '*' if all contracts are whitelisted or can be the contract address (hex format)
	ContractAddress string `json:"contractAddress"`
	// The value can be '*' if all entrypoint are whitelisted or can be the entrypoint name (string format)
	Entrypoint string `json:"entrypoint"`
}

type _WhitelistedCall WhitelistedCall

// NewWhitelistedCall instantiates a new WhitelistedCall object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWhitelistedCall(contractAddress string, entrypoint string) *WhitelistedCall {
	this := WhitelistedCall{}
	this.ContractAddress = contractAddress
	this.Entrypoint = entrypoint
	return &this
}

// NewWhitelistedCallWithDefaults instantiates a new WhitelistedCall object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWhitelistedCallWithDefaults() *WhitelistedCall {
	this := WhitelistedCall{}
	return &this
}

// GetContractAddress returns the ContractAddress field value
func (o *WhitelistedCall) GetContractAddress() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ContractAddress
}

// GetContractAddressOk returns a tuple with the ContractAddress field value
// and a boolean to check if the value has been set.
func (o *WhitelistedCall) GetContractAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ContractAddress, true
}

// SetContractAddress sets field value
func (o *WhitelistedCall) SetContractAddress(v string) {
	o.ContractAddress = v
}

// GetEntrypoint returns the Entrypoint field value
func (o *WhitelistedCall) GetEntrypoint() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Entrypoint
}

// GetEntrypointOk returns a tuple with the Entrypoint field value
// and a boolean to check if the value has been set.
func (o *WhitelistedCall) GetEntrypointOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Entrypoint, true
}

// SetEntrypoint sets field value
func (o *WhitelistedCall) SetEntrypoint(v string) {
	o.Entrypoint = v
}

func (o WhitelistedCall) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o WhitelistedCall) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["contractAddress"] = o.ContractAddress
	toSerialize["entrypoint"] = o.Entrypoint
	return toSerialize, nil
}

func (o *WhitelistedCall) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"contractAddress",
		"entrypoint",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varWhitelistedCall := _WhitelistedCall{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varWhitelistedCall)

	if err != nil {
		return err
	}

	*o = WhitelistedCall(varWhitelistedCall)

	return err
}

type NullableWhitelistedCall struct {
	value *WhitelistedCall
	isSet bool
}

func (v NullableWhitelistedCall) Get() *WhitelistedCall {
	return v.value
}

func (v *NullableWhitelistedCall) Set(val *WhitelistedCall) {
	v.value = val
	v.isSet = true
}

func (v NullableWhitelistedCall) IsSet() bool {
	return v.isSet
}

func (v *NullableWhitelistedCall) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWhitelistedCall(val *WhitelistedCall) *NullableWhitelistedCall {
	return &NullableWhitelistedCall{value: val, isSet: true}
}

func (v NullableWhitelistedCall) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWhitelistedCall) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


