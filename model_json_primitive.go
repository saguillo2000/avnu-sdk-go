/*
AVNU API

REST API documentation for accessing liquidity on Layer 2.  AVNU is a decentralized exchange protocol enabling the fastest and the most efficient operations in DeFi for Layer 2 with better pricing, zero slippage, MEV-protection and gasless trading.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the JsonPrimitive type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &JsonPrimitive{}

// JsonPrimitive struct for JsonPrimitive
type JsonPrimitive struct {
	Content string `json:"content"`
	IsString bool `json:"isString"`
}

type _JsonPrimitive JsonPrimitive

// NewJsonPrimitive instantiates a new JsonPrimitive object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewJsonPrimitive(content string, isString bool) *JsonPrimitive {
	this := JsonPrimitive{}
	this.Content = content
	this.IsString = isString
	return &this
}

// NewJsonPrimitiveWithDefaults instantiates a new JsonPrimitive object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewJsonPrimitiveWithDefaults() *JsonPrimitive {
	this := JsonPrimitive{}
	return &this
}

// GetContent returns the Content field value
func (o *JsonPrimitive) GetContent() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Content
}

// GetContentOk returns a tuple with the Content field value
// and a boolean to check if the value has been set.
func (o *JsonPrimitive) GetContentOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Content, true
}

// SetContent sets field value
func (o *JsonPrimitive) SetContent(v string) {
	o.Content = v
}

// GetIsString returns the IsString field value
func (o *JsonPrimitive) GetIsString() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsString
}

// GetIsStringOk returns a tuple with the IsString field value
// and a boolean to check if the value has been set.
func (o *JsonPrimitive) GetIsStringOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsString, true
}

// SetIsString sets field value
func (o *JsonPrimitive) SetIsString(v bool) {
	o.IsString = v
}

func (o JsonPrimitive) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o JsonPrimitive) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["content"] = o.Content
	toSerialize["isString"] = o.IsString
	return toSerialize, nil
}

func (o *JsonPrimitive) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"content",
		"isString",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varJsonPrimitive := _JsonPrimitive{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varJsonPrimitive)

	if err != nil {
		return err
	}

	*o = JsonPrimitive(varJsonPrimitive)

	return err
}

type NullableJsonPrimitive struct {
	value *JsonPrimitive
	isSet bool
}

func (v NullableJsonPrimitive) Get() *JsonPrimitive {
	return v.value
}

func (v *NullableJsonPrimitive) Set(val *JsonPrimitive) {
	v.value = val
	v.isSet = true
}

func (v NullableJsonPrimitive) IsSet() bool {
	return v.isSet
}

func (v *NullableJsonPrimitive) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJsonPrimitive(val *JsonPrimitive) *NullableJsonPrimitive {
	return &NullableJsonPrimitive{value: val, isSet: true}
}

func (v NullableJsonPrimitive) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJsonPrimitive) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


