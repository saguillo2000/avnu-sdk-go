/*
AVNU API

REST API documentation for accessing liquidity on Layer 2.  AVNU is a decentralized exchange protocol enabling the fastest and the most efficient operations in DeFi for Layer 2 with better pricing, zero slippage, MEV-protection and gasless trading.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the Reward type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Reward{}

// Reward struct for Reward
type Reward struct {
	// Reward's creation date
	Date time.Time `json:"date"`
	// The user's address
	Address string `json:"address"`
	// The company that will pay the gas fees
	Sponsor string `json:"sponsor"`
	// The name of the company's campaign
	Campaign string `json:"campaign"`
	// The protocol where the reward can be used
	Protocol *string `json:"protocol,omitempty"`
	// The number of free transaction
	FreeTx int64 `json:"freeTx"`
	// The number of remaining transactions
	RemainingTx int64 `json:"remainingTx"`
	// Reward's expiration date
	ExpirationDate *time.Time `json:"expirationDate,omitempty"`
	// The list of whitelisted calls
	WhitelistedCalls []WhitelistedCall `json:"whitelistedCalls"`
}

type _Reward Reward

// NewReward instantiates a new Reward object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReward(date time.Time, address string, sponsor string, campaign string, freeTx int64, remainingTx int64, whitelistedCalls []WhitelistedCall) *Reward {
	this := Reward{}
	this.Date = date
	this.Address = address
	this.Sponsor = sponsor
	this.Campaign = campaign
	this.FreeTx = freeTx
	this.RemainingTx = remainingTx
	this.WhitelistedCalls = whitelistedCalls
	return &this
}

// NewRewardWithDefaults instantiates a new Reward object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRewardWithDefaults() *Reward {
	this := Reward{}
	return &this
}

// GetDate returns the Date field value
func (o *Reward) GetDate() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.Date
}

// GetDateOk returns a tuple with the Date field value
// and a boolean to check if the value has been set.
func (o *Reward) GetDateOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Date, true
}

// SetDate sets field value
func (o *Reward) SetDate(v time.Time) {
	o.Date = v
}

// GetAddress returns the Address field value
func (o *Reward) GetAddress() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Address
}

// GetAddressOk returns a tuple with the Address field value
// and a boolean to check if the value has been set.
func (o *Reward) GetAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Address, true
}

// SetAddress sets field value
func (o *Reward) SetAddress(v string) {
	o.Address = v
}

// GetSponsor returns the Sponsor field value
func (o *Reward) GetSponsor() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Sponsor
}

// GetSponsorOk returns a tuple with the Sponsor field value
// and a boolean to check if the value has been set.
func (o *Reward) GetSponsorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Sponsor, true
}

// SetSponsor sets field value
func (o *Reward) SetSponsor(v string) {
	o.Sponsor = v
}

// GetCampaign returns the Campaign field value
func (o *Reward) GetCampaign() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Campaign
}

// GetCampaignOk returns a tuple with the Campaign field value
// and a boolean to check if the value has been set.
func (o *Reward) GetCampaignOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Campaign, true
}

// SetCampaign sets field value
func (o *Reward) SetCampaign(v string) {
	o.Campaign = v
}

// GetProtocol returns the Protocol field value if set, zero value otherwise.
func (o *Reward) GetProtocol() string {
	if o == nil || IsNil(o.Protocol) {
		var ret string
		return ret
	}
	return *o.Protocol
}

// GetProtocolOk returns a tuple with the Protocol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Reward) GetProtocolOk() (*string, bool) {
	if o == nil || IsNil(o.Protocol) {
		return nil, false
	}
	return o.Protocol, true
}

// HasProtocol returns a boolean if a field has been set.
func (o *Reward) HasProtocol() bool {
	if o != nil && !IsNil(o.Protocol) {
		return true
	}

	return false
}

// SetProtocol gets a reference to the given string and assigns it to the Protocol field.
func (o *Reward) SetProtocol(v string) {
	o.Protocol = &v
}

// GetFreeTx returns the FreeTx field value
func (o *Reward) GetFreeTx() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.FreeTx
}

// GetFreeTxOk returns a tuple with the FreeTx field value
// and a boolean to check if the value has been set.
func (o *Reward) GetFreeTxOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FreeTx, true
}

// SetFreeTx sets field value
func (o *Reward) SetFreeTx(v int64) {
	o.FreeTx = v
}

// GetRemainingTx returns the RemainingTx field value
func (o *Reward) GetRemainingTx() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.RemainingTx
}

// GetRemainingTxOk returns a tuple with the RemainingTx field value
// and a boolean to check if the value has been set.
func (o *Reward) GetRemainingTxOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RemainingTx, true
}

// SetRemainingTx sets field value
func (o *Reward) SetRemainingTx(v int64) {
	o.RemainingTx = v
}

// GetExpirationDate returns the ExpirationDate field value if set, zero value otherwise.
func (o *Reward) GetExpirationDate() time.Time {
	if o == nil || IsNil(o.ExpirationDate) {
		var ret time.Time
		return ret
	}
	return *o.ExpirationDate
}

// GetExpirationDateOk returns a tuple with the ExpirationDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Reward) GetExpirationDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.ExpirationDate) {
		return nil, false
	}
	return o.ExpirationDate, true
}

// HasExpirationDate returns a boolean if a field has been set.
func (o *Reward) HasExpirationDate() bool {
	if o != nil && !IsNil(o.ExpirationDate) {
		return true
	}

	return false
}

// SetExpirationDate gets a reference to the given time.Time and assigns it to the ExpirationDate field.
func (o *Reward) SetExpirationDate(v time.Time) {
	o.ExpirationDate = &v
}

// GetWhitelistedCalls returns the WhitelistedCalls field value
func (o *Reward) GetWhitelistedCalls() []WhitelistedCall {
	if o == nil {
		var ret []WhitelistedCall
		return ret
	}

	return o.WhitelistedCalls
}

// GetWhitelistedCallsOk returns a tuple with the WhitelistedCalls field value
// and a boolean to check if the value has been set.
func (o *Reward) GetWhitelistedCallsOk() ([]WhitelistedCall, bool) {
	if o == nil {
		return nil, false
	}
	return o.WhitelistedCalls, true
}

// SetWhitelistedCalls sets field value
func (o *Reward) SetWhitelistedCalls(v []WhitelistedCall) {
	o.WhitelistedCalls = v
}

func (o Reward) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Reward) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["date"] = o.Date
	toSerialize["address"] = o.Address
	toSerialize["sponsor"] = o.Sponsor
	toSerialize["campaign"] = o.Campaign
	if !IsNil(o.Protocol) {
		toSerialize["protocol"] = o.Protocol
	}
	toSerialize["freeTx"] = o.FreeTx
	toSerialize["remainingTx"] = o.RemainingTx
	if !IsNil(o.ExpirationDate) {
		toSerialize["expirationDate"] = o.ExpirationDate
	}
	toSerialize["whitelistedCalls"] = o.WhitelistedCalls
	return toSerialize, nil
}

func (o *Reward) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"date",
		"address",
		"sponsor",
		"campaign",
		"freeTx",
		"remainingTx",
		"whitelistedCalls",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varReward := _Reward{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varReward)

	if err != nil {
		return err
	}

	*o = Reward(varReward)

	return err
}

type NullableReward struct {
	value *Reward
	isSet bool
}

func (v NullableReward) Get() *Reward {
	return v.value
}

func (v *NullableReward) Set(val *Reward) {
	v.value = val
	v.isSet = true
}

func (v NullableReward) IsSet() bool {
	return v.isSet
}

func (v *NullableReward) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReward(val *Reward) *NullableReward {
	return &NullableReward{value: val, isSet: true}
}

func (v NullableReward) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReward) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


