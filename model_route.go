/*
AVNU API

REST API documentation for accessing liquidity on Layer 2.  AVNU is a decentralized exchange protocol enabling the fastest and the most efficient operations in DeFi for Layer 2 with better pricing, zero slippage, MEV-protection and gasless trading.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the Route type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Route{}

// Route struct for Route
type Route struct {
	// The name of the source
	Name string `json:"name"`
	// The address of the source
	Address string `json:"address"`
	// The percentage distribution of sellToken. 1 is 100%
	Percent float32 `json:"percent"`
	// The token address user wants to sell
	SellTokenAddress string `json:"sellTokenAddress"`
	// The token address user wants to buy
	BuyTokenAddress string `json:"buyTokenAddress"`
}

type _Route Route

// NewRoute instantiates a new Route object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRoute(name string, address string, percent float32, sellTokenAddress string, buyTokenAddress string) *Route {
	this := Route{}
	this.Name = name
	this.Address = address
	this.Percent = percent
	this.SellTokenAddress = sellTokenAddress
	this.BuyTokenAddress = buyTokenAddress
	return &this
}

// NewRouteWithDefaults instantiates a new Route object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRouteWithDefaults() *Route {
	this := Route{}
	return &this
}

// GetName returns the Name field value
func (o *Route) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Route) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *Route) SetName(v string) {
	o.Name = v
}

// GetAddress returns the Address field value
func (o *Route) GetAddress() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Address
}

// GetAddressOk returns a tuple with the Address field value
// and a boolean to check if the value has been set.
func (o *Route) GetAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Address, true
}

// SetAddress sets field value
func (o *Route) SetAddress(v string) {
	o.Address = v
}

// GetPercent returns the Percent field value
func (o *Route) GetPercent() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Percent
}

// GetPercentOk returns a tuple with the Percent field value
// and a boolean to check if the value has been set.
func (o *Route) GetPercentOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Percent, true
}

// SetPercent sets field value
func (o *Route) SetPercent(v float32) {
	o.Percent = v
}

// GetSellTokenAddress returns the SellTokenAddress field value
func (o *Route) GetSellTokenAddress() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SellTokenAddress
}

// GetSellTokenAddressOk returns a tuple with the SellTokenAddress field value
// and a boolean to check if the value has been set.
func (o *Route) GetSellTokenAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SellTokenAddress, true
}

// SetSellTokenAddress sets field value
func (o *Route) SetSellTokenAddress(v string) {
	o.SellTokenAddress = v
}

// GetBuyTokenAddress returns the BuyTokenAddress field value
func (o *Route) GetBuyTokenAddress() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.BuyTokenAddress
}

// GetBuyTokenAddressOk returns a tuple with the BuyTokenAddress field value
// and a boolean to check if the value has been set.
func (o *Route) GetBuyTokenAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BuyTokenAddress, true
}

// SetBuyTokenAddress sets field value
func (o *Route) SetBuyTokenAddress(v string) {
	o.BuyTokenAddress = v
}

func (o Route) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Route) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["address"] = o.Address
	toSerialize["percent"] = o.Percent
	toSerialize["sellTokenAddress"] = o.SellTokenAddress
	toSerialize["buyTokenAddress"] = o.BuyTokenAddress
	return toSerialize, nil
}

func (o *Route) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"address",
		"percent",
		"sellTokenAddress",
		"buyTokenAddress",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRoute := _Route{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRoute)

	if err != nil {
		return err
	}

	*o = Route(varRoute)

	return err
}

type NullableRoute struct {
	value *Route
	isSet bool
}

func (v NullableRoute) Get() *Route {
	return v.value
}

func (v *NullableRoute) Set(val *Route) {
	v.value = val
	v.isSet = true
}

func (v NullableRoute) IsSet() bool {
	return v.isSet
}

func (v *NullableRoute) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRoute(val *Route) *NullableRoute {
	return &NullableRoute{value: val, isSet: true}
}

func (v NullableRoute) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRoute) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


