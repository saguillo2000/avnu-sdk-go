/*
AVNU API

REST API documentation for accessing liquidity on Layer 2.  AVNU is a decentralized exchange protocol enabling the fastest and the most efficient operations in DeFi for Layer 2 with better pricing, zero slippage, MEV-protection and gasless trading.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ExecuteSwapResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ExecuteSwapResponse{}

// ExecuteSwapResponse struct for ExecuteSwapResponse
type ExecuteSwapResponse struct {
	// The hash of the transaction
	TransactionHash string `json:"transactionHash"`
	// The address of the gas token used to pay gas fees
	GasTokenAddress *string `json:"gasTokenAddress,omitempty"`
	// The amount of gas token used to pay gas fees
	GasTokenAmount *string `json:"gasTokenAmount,omitempty"`
}

type _ExecuteSwapResponse ExecuteSwapResponse

// NewExecuteSwapResponse instantiates a new ExecuteSwapResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExecuteSwapResponse(transactionHash string) *ExecuteSwapResponse {
	this := ExecuteSwapResponse{}
	this.TransactionHash = transactionHash
	return &this
}

// NewExecuteSwapResponseWithDefaults instantiates a new ExecuteSwapResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExecuteSwapResponseWithDefaults() *ExecuteSwapResponse {
	this := ExecuteSwapResponse{}
	return &this
}

// GetTransactionHash returns the TransactionHash field value
func (o *ExecuteSwapResponse) GetTransactionHash() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TransactionHash
}

// GetTransactionHashOk returns a tuple with the TransactionHash field value
// and a boolean to check if the value has been set.
func (o *ExecuteSwapResponse) GetTransactionHashOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TransactionHash, true
}

// SetTransactionHash sets field value
func (o *ExecuteSwapResponse) SetTransactionHash(v string) {
	o.TransactionHash = v
}

// GetGasTokenAddress returns the GasTokenAddress field value if set, zero value otherwise.
func (o *ExecuteSwapResponse) GetGasTokenAddress() string {
	if o == nil || IsNil(o.GasTokenAddress) {
		var ret string
		return ret
	}
	return *o.GasTokenAddress
}

// GetGasTokenAddressOk returns a tuple with the GasTokenAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExecuteSwapResponse) GetGasTokenAddressOk() (*string, bool) {
	if o == nil || IsNil(o.GasTokenAddress) {
		return nil, false
	}
	return o.GasTokenAddress, true
}

// HasGasTokenAddress returns a boolean if a field has been set.
func (o *ExecuteSwapResponse) HasGasTokenAddress() bool {
	if o != nil && !IsNil(o.GasTokenAddress) {
		return true
	}

	return false
}

// SetGasTokenAddress gets a reference to the given string and assigns it to the GasTokenAddress field.
func (o *ExecuteSwapResponse) SetGasTokenAddress(v string) {
	o.GasTokenAddress = &v
}

// GetGasTokenAmount returns the GasTokenAmount field value if set, zero value otherwise.
func (o *ExecuteSwapResponse) GetGasTokenAmount() string {
	if o == nil || IsNil(o.GasTokenAmount) {
		var ret string
		return ret
	}
	return *o.GasTokenAmount
}

// GetGasTokenAmountOk returns a tuple with the GasTokenAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExecuteSwapResponse) GetGasTokenAmountOk() (*string, bool) {
	if o == nil || IsNil(o.GasTokenAmount) {
		return nil, false
	}
	return o.GasTokenAmount, true
}

// HasGasTokenAmount returns a boolean if a field has been set.
func (o *ExecuteSwapResponse) HasGasTokenAmount() bool {
	if o != nil && !IsNil(o.GasTokenAmount) {
		return true
	}

	return false
}

// SetGasTokenAmount gets a reference to the given string and assigns it to the GasTokenAmount field.
func (o *ExecuteSwapResponse) SetGasTokenAmount(v string) {
	o.GasTokenAmount = &v
}

func (o ExecuteSwapResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ExecuteSwapResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["transactionHash"] = o.TransactionHash
	if !IsNil(o.GasTokenAddress) {
		toSerialize["gasTokenAddress"] = o.GasTokenAddress
	}
	if !IsNil(o.GasTokenAmount) {
		toSerialize["gasTokenAmount"] = o.GasTokenAmount
	}
	return toSerialize, nil
}

func (o *ExecuteSwapResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"transactionHash",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varExecuteSwapResponse := _ExecuteSwapResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varExecuteSwapResponse)

	if err != nil {
		return err
	}

	*o = ExecuteSwapResponse(varExecuteSwapResponse)

	return err
}

type NullableExecuteSwapResponse struct {
	value *ExecuteSwapResponse
	isSet bool
}

func (v NullableExecuteSwapResponse) Get() *ExecuteSwapResponse {
	return v.value
}

func (v *NullableExecuteSwapResponse) Set(val *ExecuteSwapResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableExecuteSwapResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableExecuteSwapResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExecuteSwapResponse(val *ExecuteSwapResponse) *NullableExecuteSwapResponse {
	return &NullableExecuteSwapResponse{value: val, isSet: true}
}

func (v NullableExecuteSwapResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExecuteSwapResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


