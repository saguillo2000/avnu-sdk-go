/*
AVNU API

REST API documentation for accessing liquidity on Layer 2.  AVNU is a decentralized exchange protocol enabling the fastest and the most efficient operations in DeFi for Layer 2 with better pricing, zero slippage, MEV-protection and gasless trading.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the DeploymentDataDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DeploymentDataDto{}

// DeploymentDataDto When this field is set, the paymaster will deploy the user's account before executing the typed data. To retrieve the deployment data, you can read https://community.starknet.io/t/snip-deployment-interface-between-dapps-and-wallets/101923. For now, the paymaster only allows the deployment of account for sponsored transactions.
type DeploymentDataDto struct {
	ClassHash string `json:"class_hash"`
	Salt string `json:"salt"`
	Unique string `json:"unique"`
	Calldata []string `json:"calldata"`
	Sigdata []string `json:"sigdata"`
}

type _DeploymentDataDto DeploymentDataDto

// NewDeploymentDataDto instantiates a new DeploymentDataDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeploymentDataDto(classHash string, salt string, unique string, calldata []string, sigdata []string) *DeploymentDataDto {
	this := DeploymentDataDto{}
	this.ClassHash = classHash
	this.Salt = salt
	this.Unique = unique
	this.Calldata = calldata
	this.Sigdata = sigdata
	return &this
}

// NewDeploymentDataDtoWithDefaults instantiates a new DeploymentDataDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeploymentDataDtoWithDefaults() *DeploymentDataDto {
	this := DeploymentDataDto{}
	return &this
}

// GetClassHash returns the ClassHash field value
func (o *DeploymentDataDto) GetClassHash() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClassHash
}

// GetClassHashOk returns a tuple with the ClassHash field value
// and a boolean to check if the value has been set.
func (o *DeploymentDataDto) GetClassHashOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClassHash, true
}

// SetClassHash sets field value
func (o *DeploymentDataDto) SetClassHash(v string) {
	o.ClassHash = v
}

// GetSalt returns the Salt field value
func (o *DeploymentDataDto) GetSalt() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Salt
}

// GetSaltOk returns a tuple with the Salt field value
// and a boolean to check if the value has been set.
func (o *DeploymentDataDto) GetSaltOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Salt, true
}

// SetSalt sets field value
func (o *DeploymentDataDto) SetSalt(v string) {
	o.Salt = v
}

// GetUnique returns the Unique field value
func (o *DeploymentDataDto) GetUnique() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Unique
}

// GetUniqueOk returns a tuple with the Unique field value
// and a boolean to check if the value has been set.
func (o *DeploymentDataDto) GetUniqueOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Unique, true
}

// SetUnique sets field value
func (o *DeploymentDataDto) SetUnique(v string) {
	o.Unique = v
}

// GetCalldata returns the Calldata field value
func (o *DeploymentDataDto) GetCalldata() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Calldata
}

// GetCalldataOk returns a tuple with the Calldata field value
// and a boolean to check if the value has been set.
func (o *DeploymentDataDto) GetCalldataOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Calldata, true
}

// SetCalldata sets field value
func (o *DeploymentDataDto) SetCalldata(v []string) {
	o.Calldata = v
}

// GetSigdata returns the Sigdata field value
func (o *DeploymentDataDto) GetSigdata() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Sigdata
}

// GetSigdataOk returns a tuple with the Sigdata field value
// and a boolean to check if the value has been set.
func (o *DeploymentDataDto) GetSigdataOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Sigdata, true
}

// SetSigdata sets field value
func (o *DeploymentDataDto) SetSigdata(v []string) {
	o.Sigdata = v
}

func (o DeploymentDataDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DeploymentDataDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["class_hash"] = o.ClassHash
	toSerialize["salt"] = o.Salt
	toSerialize["unique"] = o.Unique
	toSerialize["calldata"] = o.Calldata
	toSerialize["sigdata"] = o.Sigdata
	return toSerialize, nil
}

func (o *DeploymentDataDto) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"class_hash",
		"salt",
		"unique",
		"calldata",
		"sigdata",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDeploymentDataDto := _DeploymentDataDto{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDeploymentDataDto)

	if err != nil {
		return err
	}

	*o = DeploymentDataDto(varDeploymentDataDto)

	return err
}

type NullableDeploymentDataDto struct {
	value *DeploymentDataDto
	isSet bool
}

func (v NullableDeploymentDataDto) Get() *DeploymentDataDto {
	return v.value
}

func (v *NullableDeploymentDataDto) Set(val *DeploymentDataDto) {
	v.value = val
	v.isSet = true
}

func (v NullableDeploymentDataDto) IsSet() bool {
	return v.isSet
}

func (v *NullableDeploymentDataDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeploymentDataDto(val *DeploymentDataDto) *NullableDeploymentDataDto {
	return &NullableDeploymentDataDto{value: val, isSet: true}
}

func (v NullableDeploymentDataDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeploymentDataDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


