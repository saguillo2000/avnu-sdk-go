/*
AVNU API

REST API documentation for accessing liquidity on Layer 2.  AVNU is a decentralized exchange protocol enabling the fastest and the most efficient operations in DeFi for Layer 2 with better pricing, zero slippage, MEV-protection and gasless trading.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ExecuteSwapRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ExecuteSwapRequest{}

// ExecuteSwapRequest struct for ExecuteSwapRequest
type ExecuteSwapRequest struct {
	// The unique id of the quote
	QuoteId string `json:"quoteId"`
	Signature []string `json:"signature"`
}

type _ExecuteSwapRequest ExecuteSwapRequest

// NewExecuteSwapRequest instantiates a new ExecuteSwapRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExecuteSwapRequest(quoteId string, signature []string) *ExecuteSwapRequest {
	this := ExecuteSwapRequest{}
	this.QuoteId = quoteId
	this.Signature = signature
	return &this
}

// NewExecuteSwapRequestWithDefaults instantiates a new ExecuteSwapRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExecuteSwapRequestWithDefaults() *ExecuteSwapRequest {
	this := ExecuteSwapRequest{}
	return &this
}

// GetQuoteId returns the QuoteId field value
func (o *ExecuteSwapRequest) GetQuoteId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.QuoteId
}

// GetQuoteIdOk returns a tuple with the QuoteId field value
// and a boolean to check if the value has been set.
func (o *ExecuteSwapRequest) GetQuoteIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.QuoteId, true
}

// SetQuoteId sets field value
func (o *ExecuteSwapRequest) SetQuoteId(v string) {
	o.QuoteId = v
}

// GetSignature returns the Signature field value
func (o *ExecuteSwapRequest) GetSignature() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Signature
}

// GetSignatureOk returns a tuple with the Signature field value
// and a boolean to check if the value has been set.
func (o *ExecuteSwapRequest) GetSignatureOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Signature, true
}

// SetSignature sets field value
func (o *ExecuteSwapRequest) SetSignature(v []string) {
	o.Signature = v
}

func (o ExecuteSwapRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ExecuteSwapRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["quoteId"] = o.QuoteId
	toSerialize["signature"] = o.Signature
	return toSerialize, nil
}

func (o *ExecuteSwapRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"quoteId",
		"signature",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varExecuteSwapRequest := _ExecuteSwapRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varExecuteSwapRequest)

	if err != nil {
		return err
	}

	*o = ExecuteSwapRequest(varExecuteSwapRequest)

	return err
}

type NullableExecuteSwapRequest struct {
	value *ExecuteSwapRequest
	isSet bool
}

func (v NullableExecuteSwapRequest) Get() *ExecuteSwapRequest {
	return v.value
}

func (v *NullableExecuteSwapRequest) Set(val *ExecuteSwapRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableExecuteSwapRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableExecuteSwapRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExecuteSwapRequest(val *ExecuteSwapRequest) *NullableExecuteSwapRequest {
	return &NullableExecuteSwapRequest{value: val, isSet: true}
}

func (v NullableExecuteSwapRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExecuteSwapRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


