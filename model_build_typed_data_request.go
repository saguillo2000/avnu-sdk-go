/*
AVNU API

REST API documentation for accessing liquidity on Layer 2.  AVNU is a decentralized exchange protocol enabling the fastest and the most efficient operations in DeFi for Layer 2 with better pricing, zero slippage, MEV-protection and gasless trading.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the BuildTypedDataRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BuildTypedDataRequest{}

// BuildTypedDataRequest struct for BuildTypedDataRequest
type BuildTypedDataRequest struct {
	// The user's address
	UserAddress string `json:"userAddress"`
	// The list of calls that will be executed
	Calls []Call `json:"calls"`
	// Gas token address.If null, there is two options:1. the user must have a reward compatible with the calls. In this case, the reward's sponsor will pay the gas fees in ETH.2. the api-key header must be field. The api-key's owner will be charged for the consumed gas fees in ETH
	GasTokenAddress *string `json:"gasTokenAddress,omitempty"`
	// Max gas token amountIf null, there is two options:1. the user must have a reward compatible with the calls. In this case, the reward's sponsor will pay the gas fees in ETH.2. the api-key header must be field. The api-key's owner will be charged for the consumed gas fees in ETH
	MaxGasTokenAmount *string `json:"maxGasTokenAmount,omitempty"`
	// Only set this field when the account is not deployed. When the accountClassHash is defined, the API will not check the gasless compatibility by calling the supportsInterface entrypoint but will instead look into an internal map. If the classHash is not supported by the API, please contact us so we can quickly add support.
	AccountClassHash *string `json:"accountClassHash,omitempty"`
}

type _BuildTypedDataRequest BuildTypedDataRequest

// NewBuildTypedDataRequest instantiates a new BuildTypedDataRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBuildTypedDataRequest(userAddress string, calls []Call) *BuildTypedDataRequest {
	this := BuildTypedDataRequest{}
	this.UserAddress = userAddress
	this.Calls = calls
	return &this
}

// NewBuildTypedDataRequestWithDefaults instantiates a new BuildTypedDataRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBuildTypedDataRequestWithDefaults() *BuildTypedDataRequest {
	this := BuildTypedDataRequest{}
	return &this
}

// GetUserAddress returns the UserAddress field value
func (o *BuildTypedDataRequest) GetUserAddress() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UserAddress
}

// GetUserAddressOk returns a tuple with the UserAddress field value
// and a boolean to check if the value has been set.
func (o *BuildTypedDataRequest) GetUserAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UserAddress, true
}

// SetUserAddress sets field value
func (o *BuildTypedDataRequest) SetUserAddress(v string) {
	o.UserAddress = v
}

// GetCalls returns the Calls field value
func (o *BuildTypedDataRequest) GetCalls() []Call {
	if o == nil {
		var ret []Call
		return ret
	}

	return o.Calls
}

// GetCallsOk returns a tuple with the Calls field value
// and a boolean to check if the value has been set.
func (o *BuildTypedDataRequest) GetCallsOk() ([]Call, bool) {
	if o == nil {
		return nil, false
	}
	return o.Calls, true
}

// SetCalls sets field value
func (o *BuildTypedDataRequest) SetCalls(v []Call) {
	o.Calls = v
}

// GetGasTokenAddress returns the GasTokenAddress field value if set, zero value otherwise.
func (o *BuildTypedDataRequest) GetGasTokenAddress() string {
	if o == nil || IsNil(o.GasTokenAddress) {
		var ret string
		return ret
	}
	return *o.GasTokenAddress
}

// GetGasTokenAddressOk returns a tuple with the GasTokenAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BuildTypedDataRequest) GetGasTokenAddressOk() (*string, bool) {
	if o == nil || IsNil(o.GasTokenAddress) {
		return nil, false
	}
	return o.GasTokenAddress, true
}

// HasGasTokenAddress returns a boolean if a field has been set.
func (o *BuildTypedDataRequest) HasGasTokenAddress() bool {
	if o != nil && !IsNil(o.GasTokenAddress) {
		return true
	}

	return false
}

// SetGasTokenAddress gets a reference to the given string and assigns it to the GasTokenAddress field.
func (o *BuildTypedDataRequest) SetGasTokenAddress(v string) {
	o.GasTokenAddress = &v
}

// GetMaxGasTokenAmount returns the MaxGasTokenAmount field value if set, zero value otherwise.
func (o *BuildTypedDataRequest) GetMaxGasTokenAmount() string {
	if o == nil || IsNil(o.MaxGasTokenAmount) {
		var ret string
		return ret
	}
	return *o.MaxGasTokenAmount
}

// GetMaxGasTokenAmountOk returns a tuple with the MaxGasTokenAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BuildTypedDataRequest) GetMaxGasTokenAmountOk() (*string, bool) {
	if o == nil || IsNil(o.MaxGasTokenAmount) {
		return nil, false
	}
	return o.MaxGasTokenAmount, true
}

// HasMaxGasTokenAmount returns a boolean if a field has been set.
func (o *BuildTypedDataRequest) HasMaxGasTokenAmount() bool {
	if o != nil && !IsNil(o.MaxGasTokenAmount) {
		return true
	}

	return false
}

// SetMaxGasTokenAmount gets a reference to the given string and assigns it to the MaxGasTokenAmount field.
func (o *BuildTypedDataRequest) SetMaxGasTokenAmount(v string) {
	o.MaxGasTokenAmount = &v
}

// GetAccountClassHash returns the AccountClassHash field value if set, zero value otherwise.
func (o *BuildTypedDataRequest) GetAccountClassHash() string {
	if o == nil || IsNil(o.AccountClassHash) {
		var ret string
		return ret
	}
	return *o.AccountClassHash
}

// GetAccountClassHashOk returns a tuple with the AccountClassHash field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BuildTypedDataRequest) GetAccountClassHashOk() (*string, bool) {
	if o == nil || IsNil(o.AccountClassHash) {
		return nil, false
	}
	return o.AccountClassHash, true
}

// HasAccountClassHash returns a boolean if a field has been set.
func (o *BuildTypedDataRequest) HasAccountClassHash() bool {
	if o != nil && !IsNil(o.AccountClassHash) {
		return true
	}

	return false
}

// SetAccountClassHash gets a reference to the given string and assigns it to the AccountClassHash field.
func (o *BuildTypedDataRequest) SetAccountClassHash(v string) {
	o.AccountClassHash = &v
}

func (o BuildTypedDataRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BuildTypedDataRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["userAddress"] = o.UserAddress
	toSerialize["calls"] = o.Calls
	if !IsNil(o.GasTokenAddress) {
		toSerialize["gasTokenAddress"] = o.GasTokenAddress
	}
	if !IsNil(o.MaxGasTokenAmount) {
		toSerialize["maxGasTokenAmount"] = o.MaxGasTokenAmount
	}
	if !IsNil(o.AccountClassHash) {
		toSerialize["accountClassHash"] = o.AccountClassHash
	}
	return toSerialize, nil
}

func (o *BuildTypedDataRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"userAddress",
		"calls",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varBuildTypedDataRequest := _BuildTypedDataRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varBuildTypedDataRequest)

	if err != nil {
		return err
	}

	*o = BuildTypedDataRequest(varBuildTypedDataRequest)

	return err
}

type NullableBuildTypedDataRequest struct {
	value *BuildTypedDataRequest
	isSet bool
}

func (v NullableBuildTypedDataRequest) Get() *BuildTypedDataRequest {
	return v.value
}

func (v *NullableBuildTypedDataRequest) Set(val *BuildTypedDataRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableBuildTypedDataRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableBuildTypedDataRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBuildTypedDataRequest(val *BuildTypedDataRequest) *NullableBuildTypedDataRequest {
	return &NullableBuildTypedDataRequest{value: val, isSet: true}
}

func (v NullableBuildTypedDataRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBuildTypedDataRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


