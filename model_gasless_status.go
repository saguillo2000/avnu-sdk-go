/*
AVNU API

REST API documentation for accessing liquidity on Layer 2.  AVNU is a decentralized exchange protocol enabling the fastest and the most efficient operations in DeFi for Layer 2 with better pricing, zero slippage, MEV-protection and gasless trading.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the GaslessStatus type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GaslessStatus{}

// GaslessStatus struct for GaslessStatus
type GaslessStatus struct {
	// The gasless status
	Status bool `json:"status"`
}

type _GaslessStatus GaslessStatus

// NewGaslessStatus instantiates a new GaslessStatus object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGaslessStatus(status bool) *GaslessStatus {
	this := GaslessStatus{}
	this.Status = status
	return &this
}

// NewGaslessStatusWithDefaults instantiates a new GaslessStatus object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGaslessStatusWithDefaults() *GaslessStatus {
	this := GaslessStatus{}
	return &this
}

// GetStatus returns the Status field value
func (o *GaslessStatus) GetStatus() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *GaslessStatus) GetStatusOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *GaslessStatus) SetStatus(v bool) {
	o.Status = v
}

func (o GaslessStatus) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GaslessStatus) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["status"] = o.Status
	return toSerialize, nil
}

func (o *GaslessStatus) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"status",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varGaslessStatus := _GaslessStatus{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varGaslessStatus)

	if err != nil {
		return err
	}

	*o = GaslessStatus(varGaslessStatus)

	return err
}

type NullableGaslessStatus struct {
	value *GaslessStatus
	isSet bool
}

func (v NullableGaslessStatus) Get() *GaslessStatus {
	return v.value
}

func (v *NullableGaslessStatus) Set(val *GaslessStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableGaslessStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableGaslessStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGaslessStatus(val *GaslessStatus) *NullableGaslessStatus {
	return &NullableGaslessStatus{value: val, isSet: true}
}

func (v NullableGaslessStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGaslessStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


