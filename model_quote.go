/*
AVNU API

REST API documentation for accessing liquidity on Layer 2.  AVNU is a decentralized exchange protocol enabling the fastest and the most efficient operations in DeFi for Layer 2 with better pricing, zero slippage, MEV-protection and gasless trading.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the Quote type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Quote{}

// Quote struct for Quote
type Quote struct {
	// The unique id of the quote
	QuoteId string `json:"quoteId"`
	// The token address user wants to sell
	SellTokenAddress string `json:"sellTokenAddress"`
	// The amount of sellAmount that would be sold in this swap
	SellAmount string `json:"sellAmount"`
	// The amount of sellAmount that would be sold in this swap in usd
	SellAmountInUsd float64 `json:"sellAmountInUsd"`
	// The token address user wants to buy
	BuyTokenAddress string `json:"buyTokenAddress"`
	// The amount of buyToken that would be bought in this swap
	BuyAmount string `json:"buyAmount"`
	// The amount of buyToken that would be bought in this swap in usd
	BuyAmountInUsd float64 `json:"buyAmountInUsd"`
	// The amount of buyToken without fees
	BuyAmountWithoutFees string `json:"buyAmountWithoutFees"`
	// The amount of buyToken without fees in usd
	BuyAmountWithoutFeesInUsd float64 `json:"buyAmountWithoutFeesInUsd"`
	// If true, user should define a slippage when he executes the quote
	EstimatedAmount bool `json:"estimatedAmount"`
	// The chain's id
	ChainId string `json:"chainId"`
	// Defined when quote comes from a DEX
	BlockNumber *string `json:"blockNumber,omitempty"`
	// Unix timestamp when quotes expires in seconds
	Expiry *float32 `json:"expiry,omitempty"`
	Routes []Route `json:"routes"`
	// The estimated amount of gas fees
	GasFees string `json:"gasFees"`
	// The estimated amount of gas fees in USD
	GasFeesInUsd *float64 `json:"gasFeesInUsd,omitempty"`
	// The actual fees taken by AVNU
	AvnuFees string `json:"avnuFees"`
	// The actual fees taken by AVNU is usd
	AvnuFeesInUsd float64 `json:"avnuFeesInUsd"`
	// The fees in bps taken by AVNU
	AvnuFeesBps string `json:"avnuFeesBps"`
	// The actual fees taken by the integrator
	IntegratorFees string `json:"integratorFees"`
	// The actual fees taken by the integrator in usd
	IntegratorFeesInUsd float64 `json:"integratorFeesInUsd"`
	// The fees in bps taken by the integrator
	IntegratorFeesBps string `json:"integratorFeesBps"`
	// Price ratio in usd and in bps
	PriceRatioUsd float32 `json:"priceRatioUsd"`
	// The type of liquidity source
	LiquiditySource string `json:"liquiditySource"`
	// The amount in USD to buy 1 sellToken
	SellTokenPriceInUsd *float64 `json:"sellTokenPriceInUsd,omitempty"`
	// The amount in USD to buy 1 buyToken
	BuyTokenPriceInUsd *float64 `json:"buyTokenPriceInUsd,omitempty"`
	Gasless Gasless `json:"gasless"`
}

type _Quote Quote

// NewQuote instantiates a new Quote object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewQuote(quoteId string, sellTokenAddress string, sellAmount string, sellAmountInUsd float64, buyTokenAddress string, buyAmount string, buyAmountInUsd float64, buyAmountWithoutFees string, buyAmountWithoutFeesInUsd float64, estimatedAmount bool, chainId string, routes []Route, gasFees string, avnuFees string, avnuFeesInUsd float64, avnuFeesBps string, integratorFees string, integratorFeesInUsd float64, integratorFeesBps string, priceRatioUsd float32, liquiditySource string, gasless Gasless) *Quote {
	this := Quote{}
	this.QuoteId = quoteId
	this.SellTokenAddress = sellTokenAddress
	this.SellAmount = sellAmount
	this.SellAmountInUsd = sellAmountInUsd
	this.BuyTokenAddress = buyTokenAddress
	this.BuyAmount = buyAmount
	this.BuyAmountInUsd = buyAmountInUsd
	this.BuyAmountWithoutFees = buyAmountWithoutFees
	this.BuyAmountWithoutFeesInUsd = buyAmountWithoutFeesInUsd
	this.EstimatedAmount = estimatedAmount
	this.ChainId = chainId
	this.Routes = routes
	this.GasFees = gasFees
	this.AvnuFees = avnuFees
	this.AvnuFeesInUsd = avnuFeesInUsd
	this.AvnuFeesBps = avnuFeesBps
	this.IntegratorFees = integratorFees
	this.IntegratorFeesInUsd = integratorFeesInUsd
	this.IntegratorFeesBps = integratorFeesBps
	this.PriceRatioUsd = priceRatioUsd
	this.LiquiditySource = liquiditySource
	this.Gasless = gasless
	return &this
}

// NewQuoteWithDefaults instantiates a new Quote object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewQuoteWithDefaults() *Quote {
	this := Quote{}
	return &this
}

// GetQuoteId returns the QuoteId field value
func (o *Quote) GetQuoteId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.QuoteId
}

// GetQuoteIdOk returns a tuple with the QuoteId field value
// and a boolean to check if the value has been set.
func (o *Quote) GetQuoteIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.QuoteId, true
}

// SetQuoteId sets field value
func (o *Quote) SetQuoteId(v string) {
	o.QuoteId = v
}

// GetSellTokenAddress returns the SellTokenAddress field value
func (o *Quote) GetSellTokenAddress() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SellTokenAddress
}

// GetSellTokenAddressOk returns a tuple with the SellTokenAddress field value
// and a boolean to check if the value has been set.
func (o *Quote) GetSellTokenAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SellTokenAddress, true
}

// SetSellTokenAddress sets field value
func (o *Quote) SetSellTokenAddress(v string) {
	o.SellTokenAddress = v
}

// GetSellAmount returns the SellAmount field value
func (o *Quote) GetSellAmount() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SellAmount
}

// GetSellAmountOk returns a tuple with the SellAmount field value
// and a boolean to check if the value has been set.
func (o *Quote) GetSellAmountOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SellAmount, true
}

// SetSellAmount sets field value
func (o *Quote) SetSellAmount(v string) {
	o.SellAmount = v
}

// GetSellAmountInUsd returns the SellAmountInUsd field value
func (o *Quote) GetSellAmountInUsd() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.SellAmountInUsd
}

// GetSellAmountInUsdOk returns a tuple with the SellAmountInUsd field value
// and a boolean to check if the value has been set.
func (o *Quote) GetSellAmountInUsdOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SellAmountInUsd, true
}

// SetSellAmountInUsd sets field value
func (o *Quote) SetSellAmountInUsd(v float64) {
	o.SellAmountInUsd = v
}

// GetBuyTokenAddress returns the BuyTokenAddress field value
func (o *Quote) GetBuyTokenAddress() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.BuyTokenAddress
}

// GetBuyTokenAddressOk returns a tuple with the BuyTokenAddress field value
// and a boolean to check if the value has been set.
func (o *Quote) GetBuyTokenAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BuyTokenAddress, true
}

// SetBuyTokenAddress sets field value
func (o *Quote) SetBuyTokenAddress(v string) {
	o.BuyTokenAddress = v
}

// GetBuyAmount returns the BuyAmount field value
func (o *Quote) GetBuyAmount() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.BuyAmount
}

// GetBuyAmountOk returns a tuple with the BuyAmount field value
// and a boolean to check if the value has been set.
func (o *Quote) GetBuyAmountOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BuyAmount, true
}

// SetBuyAmount sets field value
func (o *Quote) SetBuyAmount(v string) {
	o.BuyAmount = v
}

// GetBuyAmountInUsd returns the BuyAmountInUsd field value
func (o *Quote) GetBuyAmountInUsd() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.BuyAmountInUsd
}

// GetBuyAmountInUsdOk returns a tuple with the BuyAmountInUsd field value
// and a boolean to check if the value has been set.
func (o *Quote) GetBuyAmountInUsdOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BuyAmountInUsd, true
}

// SetBuyAmountInUsd sets field value
func (o *Quote) SetBuyAmountInUsd(v float64) {
	o.BuyAmountInUsd = v
}

// GetBuyAmountWithoutFees returns the BuyAmountWithoutFees field value
func (o *Quote) GetBuyAmountWithoutFees() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.BuyAmountWithoutFees
}

// GetBuyAmountWithoutFeesOk returns a tuple with the BuyAmountWithoutFees field value
// and a boolean to check if the value has been set.
func (o *Quote) GetBuyAmountWithoutFeesOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BuyAmountWithoutFees, true
}

// SetBuyAmountWithoutFees sets field value
func (o *Quote) SetBuyAmountWithoutFees(v string) {
	o.BuyAmountWithoutFees = v
}

// GetBuyAmountWithoutFeesInUsd returns the BuyAmountWithoutFeesInUsd field value
func (o *Quote) GetBuyAmountWithoutFeesInUsd() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.BuyAmountWithoutFeesInUsd
}

// GetBuyAmountWithoutFeesInUsdOk returns a tuple with the BuyAmountWithoutFeesInUsd field value
// and a boolean to check if the value has been set.
func (o *Quote) GetBuyAmountWithoutFeesInUsdOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BuyAmountWithoutFeesInUsd, true
}

// SetBuyAmountWithoutFeesInUsd sets field value
func (o *Quote) SetBuyAmountWithoutFeesInUsd(v float64) {
	o.BuyAmountWithoutFeesInUsd = v
}

// GetEstimatedAmount returns the EstimatedAmount field value
func (o *Quote) GetEstimatedAmount() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.EstimatedAmount
}

// GetEstimatedAmountOk returns a tuple with the EstimatedAmount field value
// and a boolean to check if the value has been set.
func (o *Quote) GetEstimatedAmountOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EstimatedAmount, true
}

// SetEstimatedAmount sets field value
func (o *Quote) SetEstimatedAmount(v bool) {
	o.EstimatedAmount = v
}

// GetChainId returns the ChainId field value
func (o *Quote) GetChainId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ChainId
}

// GetChainIdOk returns a tuple with the ChainId field value
// and a boolean to check if the value has been set.
func (o *Quote) GetChainIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ChainId, true
}

// SetChainId sets field value
func (o *Quote) SetChainId(v string) {
	o.ChainId = v
}

// GetBlockNumber returns the BlockNumber field value if set, zero value otherwise.
func (o *Quote) GetBlockNumber() string {
	if o == nil || IsNil(o.BlockNumber) {
		var ret string
		return ret
	}
	return *o.BlockNumber
}

// GetBlockNumberOk returns a tuple with the BlockNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Quote) GetBlockNumberOk() (*string, bool) {
	if o == nil || IsNil(o.BlockNumber) {
		return nil, false
	}
	return o.BlockNumber, true
}

// HasBlockNumber returns a boolean if a field has been set.
func (o *Quote) HasBlockNumber() bool {
	if o != nil && !IsNil(o.BlockNumber) {
		return true
	}

	return false
}

// SetBlockNumber gets a reference to the given string and assigns it to the BlockNumber field.
func (o *Quote) SetBlockNumber(v string) {
	o.BlockNumber = &v
}

// GetExpiry returns the Expiry field value if set, zero value otherwise.
func (o *Quote) GetExpiry() float32 {
	if o == nil || IsNil(o.Expiry) {
		var ret float32
		return ret
	}
	return *o.Expiry
}

// GetExpiryOk returns a tuple with the Expiry field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Quote) GetExpiryOk() (*float32, bool) {
	if o == nil || IsNil(o.Expiry) {
		return nil, false
	}
	return o.Expiry, true
}

// HasExpiry returns a boolean if a field has been set.
func (o *Quote) HasExpiry() bool {
	if o != nil && !IsNil(o.Expiry) {
		return true
	}

	return false
}

// SetExpiry gets a reference to the given float32 and assigns it to the Expiry field.
func (o *Quote) SetExpiry(v float32) {
	o.Expiry = &v
}

// GetRoutes returns the Routes field value
func (o *Quote) GetRoutes() []Route {
	if o == nil {
		var ret []Route
		return ret
	}

	return o.Routes
}

// GetRoutesOk returns a tuple with the Routes field value
// and a boolean to check if the value has been set.
func (o *Quote) GetRoutesOk() ([]Route, bool) {
	if o == nil {
		return nil, false
	}
	return o.Routes, true
}

// SetRoutes sets field value
func (o *Quote) SetRoutes(v []Route) {
	o.Routes = v
}

// GetGasFees returns the GasFees field value
func (o *Quote) GetGasFees() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.GasFees
}

// GetGasFeesOk returns a tuple with the GasFees field value
// and a boolean to check if the value has been set.
func (o *Quote) GetGasFeesOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.GasFees, true
}

// SetGasFees sets field value
func (o *Quote) SetGasFees(v string) {
	o.GasFees = v
}

// GetGasFeesInUsd returns the GasFeesInUsd field value if set, zero value otherwise.
func (o *Quote) GetGasFeesInUsd() float64 {
	if o == nil || IsNil(o.GasFeesInUsd) {
		var ret float64
		return ret
	}
	return *o.GasFeesInUsd
}

// GetGasFeesInUsdOk returns a tuple with the GasFeesInUsd field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Quote) GetGasFeesInUsdOk() (*float64, bool) {
	if o == nil || IsNil(o.GasFeesInUsd) {
		return nil, false
	}
	return o.GasFeesInUsd, true
}

// HasGasFeesInUsd returns a boolean if a field has been set.
func (o *Quote) HasGasFeesInUsd() bool {
	if o != nil && !IsNil(o.GasFeesInUsd) {
		return true
	}

	return false
}

// SetGasFeesInUsd gets a reference to the given float64 and assigns it to the GasFeesInUsd field.
func (o *Quote) SetGasFeesInUsd(v float64) {
	o.GasFeesInUsd = &v
}

// GetAvnuFees returns the AvnuFees field value
func (o *Quote) GetAvnuFees() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AvnuFees
}

// GetAvnuFeesOk returns a tuple with the AvnuFees field value
// and a boolean to check if the value has been set.
func (o *Quote) GetAvnuFeesOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AvnuFees, true
}

// SetAvnuFees sets field value
func (o *Quote) SetAvnuFees(v string) {
	o.AvnuFees = v
}

// GetAvnuFeesInUsd returns the AvnuFeesInUsd field value
func (o *Quote) GetAvnuFeesInUsd() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.AvnuFeesInUsd
}

// GetAvnuFeesInUsdOk returns a tuple with the AvnuFeesInUsd field value
// and a boolean to check if the value has been set.
func (o *Quote) GetAvnuFeesInUsdOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AvnuFeesInUsd, true
}

// SetAvnuFeesInUsd sets field value
func (o *Quote) SetAvnuFeesInUsd(v float64) {
	o.AvnuFeesInUsd = v
}

// GetAvnuFeesBps returns the AvnuFeesBps field value
func (o *Quote) GetAvnuFeesBps() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AvnuFeesBps
}

// GetAvnuFeesBpsOk returns a tuple with the AvnuFeesBps field value
// and a boolean to check if the value has been set.
func (o *Quote) GetAvnuFeesBpsOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AvnuFeesBps, true
}

// SetAvnuFeesBps sets field value
func (o *Quote) SetAvnuFeesBps(v string) {
	o.AvnuFeesBps = v
}

// GetIntegratorFees returns the IntegratorFees field value
func (o *Quote) GetIntegratorFees() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.IntegratorFees
}

// GetIntegratorFeesOk returns a tuple with the IntegratorFees field value
// and a boolean to check if the value has been set.
func (o *Quote) GetIntegratorFeesOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IntegratorFees, true
}

// SetIntegratorFees sets field value
func (o *Quote) SetIntegratorFees(v string) {
	o.IntegratorFees = v
}

// GetIntegratorFeesInUsd returns the IntegratorFeesInUsd field value
func (o *Quote) GetIntegratorFeesInUsd() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.IntegratorFeesInUsd
}

// GetIntegratorFeesInUsdOk returns a tuple with the IntegratorFeesInUsd field value
// and a boolean to check if the value has been set.
func (o *Quote) GetIntegratorFeesInUsdOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IntegratorFeesInUsd, true
}

// SetIntegratorFeesInUsd sets field value
func (o *Quote) SetIntegratorFeesInUsd(v float64) {
	o.IntegratorFeesInUsd = v
}

// GetIntegratorFeesBps returns the IntegratorFeesBps field value
func (o *Quote) GetIntegratorFeesBps() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.IntegratorFeesBps
}

// GetIntegratorFeesBpsOk returns a tuple with the IntegratorFeesBps field value
// and a boolean to check if the value has been set.
func (o *Quote) GetIntegratorFeesBpsOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IntegratorFeesBps, true
}

// SetIntegratorFeesBps sets field value
func (o *Quote) SetIntegratorFeesBps(v string) {
	o.IntegratorFeesBps = v
}

// GetPriceRatioUsd returns the PriceRatioUsd field value
func (o *Quote) GetPriceRatioUsd() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.PriceRatioUsd
}

// GetPriceRatioUsdOk returns a tuple with the PriceRatioUsd field value
// and a boolean to check if the value has been set.
func (o *Quote) GetPriceRatioUsdOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PriceRatioUsd, true
}

// SetPriceRatioUsd sets field value
func (o *Quote) SetPriceRatioUsd(v float32) {
	o.PriceRatioUsd = v
}

// GetLiquiditySource returns the LiquiditySource field value
func (o *Quote) GetLiquiditySource() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LiquiditySource
}

// GetLiquiditySourceOk returns a tuple with the LiquiditySource field value
// and a boolean to check if the value has been set.
func (o *Quote) GetLiquiditySourceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LiquiditySource, true
}

// SetLiquiditySource sets field value
func (o *Quote) SetLiquiditySource(v string) {
	o.LiquiditySource = v
}

// GetSellTokenPriceInUsd returns the SellTokenPriceInUsd field value if set, zero value otherwise.
func (o *Quote) GetSellTokenPriceInUsd() float64 {
	if o == nil || IsNil(o.SellTokenPriceInUsd) {
		var ret float64
		return ret
	}
	return *o.SellTokenPriceInUsd
}

// GetSellTokenPriceInUsdOk returns a tuple with the SellTokenPriceInUsd field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Quote) GetSellTokenPriceInUsdOk() (*float64, bool) {
	if o == nil || IsNil(o.SellTokenPriceInUsd) {
		return nil, false
	}
	return o.SellTokenPriceInUsd, true
}

// HasSellTokenPriceInUsd returns a boolean if a field has been set.
func (o *Quote) HasSellTokenPriceInUsd() bool {
	if o != nil && !IsNil(o.SellTokenPriceInUsd) {
		return true
	}

	return false
}

// SetSellTokenPriceInUsd gets a reference to the given float64 and assigns it to the SellTokenPriceInUsd field.
func (o *Quote) SetSellTokenPriceInUsd(v float64) {
	o.SellTokenPriceInUsd = &v
}

// GetBuyTokenPriceInUsd returns the BuyTokenPriceInUsd field value if set, zero value otherwise.
func (o *Quote) GetBuyTokenPriceInUsd() float64 {
	if o == nil || IsNil(o.BuyTokenPriceInUsd) {
		var ret float64
		return ret
	}
	return *o.BuyTokenPriceInUsd
}

// GetBuyTokenPriceInUsdOk returns a tuple with the BuyTokenPriceInUsd field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Quote) GetBuyTokenPriceInUsdOk() (*float64, bool) {
	if o == nil || IsNil(o.BuyTokenPriceInUsd) {
		return nil, false
	}
	return o.BuyTokenPriceInUsd, true
}

// HasBuyTokenPriceInUsd returns a boolean if a field has been set.
func (o *Quote) HasBuyTokenPriceInUsd() bool {
	if o != nil && !IsNil(o.BuyTokenPriceInUsd) {
		return true
	}

	return false
}

// SetBuyTokenPriceInUsd gets a reference to the given float64 and assigns it to the BuyTokenPriceInUsd field.
func (o *Quote) SetBuyTokenPriceInUsd(v float64) {
	o.BuyTokenPriceInUsd = &v
}

// GetGasless returns the Gasless field value
func (o *Quote) GetGasless() Gasless {
	if o == nil {
		var ret Gasless
		return ret
	}

	return o.Gasless
}

// GetGaslessOk returns a tuple with the Gasless field value
// and a boolean to check if the value has been set.
func (o *Quote) GetGaslessOk() (*Gasless, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Gasless, true
}

// SetGasless sets field value
func (o *Quote) SetGasless(v Gasless) {
	o.Gasless = v
}

func (o Quote) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Quote) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["quoteId"] = o.QuoteId
	toSerialize["sellTokenAddress"] = o.SellTokenAddress
	toSerialize["sellAmount"] = o.SellAmount
	toSerialize["sellAmountInUsd"] = o.SellAmountInUsd
	toSerialize["buyTokenAddress"] = o.BuyTokenAddress
	toSerialize["buyAmount"] = o.BuyAmount
	toSerialize["buyAmountInUsd"] = o.BuyAmountInUsd
	toSerialize["buyAmountWithoutFees"] = o.BuyAmountWithoutFees
	toSerialize["buyAmountWithoutFeesInUsd"] = o.BuyAmountWithoutFeesInUsd
	toSerialize["estimatedAmount"] = o.EstimatedAmount
	toSerialize["chainId"] = o.ChainId
	if !IsNil(o.BlockNumber) {
		toSerialize["blockNumber"] = o.BlockNumber
	}
	if !IsNil(o.Expiry) {
		toSerialize["expiry"] = o.Expiry
	}
	toSerialize["routes"] = o.Routes
	toSerialize["gasFees"] = o.GasFees
	if !IsNil(o.GasFeesInUsd) {
		toSerialize["gasFeesInUsd"] = o.GasFeesInUsd
	}
	toSerialize["avnuFees"] = o.AvnuFees
	toSerialize["avnuFeesInUsd"] = o.AvnuFeesInUsd
	toSerialize["avnuFeesBps"] = o.AvnuFeesBps
	toSerialize["integratorFees"] = o.IntegratorFees
	toSerialize["integratorFeesInUsd"] = o.IntegratorFeesInUsd
	toSerialize["integratorFeesBps"] = o.IntegratorFeesBps
	toSerialize["priceRatioUsd"] = o.PriceRatioUsd
	toSerialize["liquiditySource"] = o.LiquiditySource
	if !IsNil(o.SellTokenPriceInUsd) {
		toSerialize["sellTokenPriceInUsd"] = o.SellTokenPriceInUsd
	}
	if !IsNil(o.BuyTokenPriceInUsd) {
		toSerialize["buyTokenPriceInUsd"] = o.BuyTokenPriceInUsd
	}
	toSerialize["gasless"] = o.Gasless
	return toSerialize, nil
}

func (o *Quote) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"quoteId",
		"sellTokenAddress",
		"sellAmount",
		"sellAmountInUsd",
		"buyTokenAddress",
		"buyAmount",
		"buyAmountInUsd",
		"buyAmountWithoutFees",
		"buyAmountWithoutFeesInUsd",
		"estimatedAmount",
		"chainId",
		"routes",
		"gasFees",
		"avnuFees",
		"avnuFeesInUsd",
		"avnuFeesBps",
		"integratorFees",
		"integratorFeesInUsd",
		"integratorFeesBps",
		"priceRatioUsd",
		"liquiditySource",
		"gasless",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varQuote := _Quote{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varQuote)

	if err != nil {
		return err
	}

	*o = Quote(varQuote)

	return err
}

type NullableQuote struct {
	value *Quote
	isSet bool
}

func (v NullableQuote) Get() *Quote {
	return v.value
}

func (v *NullableQuote) Set(val *Quote) {
	v.value = val
	v.isSet = true
}

func (v NullableQuote) IsSet() bool {
	return v.isSet
}

func (v *NullableQuote) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableQuote(val *Quote) *NullableQuote {
	return &NullableQuote{value: val, isSet: true}
}

func (v NullableQuote) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableQuote) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


